
from dolfin import *

# Create mesh and define function space
mesh = Mesh (" circle .xml .gz")

# Construct the finite element space
P1 = FiniteElement (" Lagrange ", mesh . ufl_cell () , 1 )
TH = P1 * P1 * P1
W = FunctionSpace ( mesh , TH )

# Define parameters :
T = 500
dt = 0.5
delta1 = 1
delta2 = 1
delta3 = 1
alpha = 0.4
gamma = 0.8
zeta = 2
L_0 = 0.4
l = 0.6
m = 0.12

# Class representing the intial conditions
class InitialConditions ( UserExpression ):
	def eval ( self , values , x ):
		values [0] = 0
		values [1] = 4/15-2*pow(10,-7)*(x[0]-0.1*x[1]-350)*(x[0]-0.1*x[1]-67)
		values [2] = 22/45-3*pow(10,-5)*(x[0]-450)-1.2*pow(10,-4)*(x[1]-15)

	def value_shape ( self ):
		return (3 ,)

# Define initial condition
indata = InitialConditions ( degree =2 )
u0 = Function ( W )
u0 = interpolate ( indata , W )

# Create bilinear and linear forms
a = ...
L = ...

# Set an output file
output_file = File("results/")

# Set initial condition
...

# Time - stepping
while t < T:

	# assign u0
	u0 . assign ( u )
	...
	...

